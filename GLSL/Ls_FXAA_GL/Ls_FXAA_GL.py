# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named Ls_FXAA_GLExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from Ls_FXAA_GLExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.Ls_FXAA_GL"

def getLabel():
    return "FXAA_GL"

def getVersion():
    return 1.0

def getIconPath():
    return "Ls_FXAA_GL.png"

def getGrouping():
    return "Community/GLSL/Effect"

def getPluginDescription():
    return "Fast cheap antialiasing."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1paramValueFloat0", "Mix : ")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueFloat0 = param
    del param

    param = lastNode.createStringParam("sep03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1paramValueFloat1", "Subpixel amount : ")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.75, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueFloat1 = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1paramValueFloat2", "Edge treshold : ")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.005, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueFloat2 = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1paramValueFloat3", "Dark treshold : ")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.04, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1paramValueFloat3 = param
    del param

    param = lastNode.createStringParam("sep06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep06 = param
    del param

    param = lastNode.createStringParam("sep07", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep07 = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep101", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep101 = param
    del param

    param = lastNode.createStringParam("sep102", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep102 = param
    del param

    param = lastNode.createSeparatorParam("NAME", "Ls_FXAA_GL v1.0")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.NAME = param
    del param

    param = lastNode.createStringParam("sep103", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep103 = param
    del param

    param = lastNode.createStringParam("sep104", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep104 = param
    del param

    param = lastNode.createSeparatorParam("LINE01", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.LINE01 = param
    del param

    param = lastNode.createStringParam("sep105", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep105 = param
    del param

    param = lastNode.createStringParam("sep106", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep106 = param
    del param

    param = lastNode.createSeparatorParam("FR", "ShaderToy 0.8.8")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FR = param
    del param

    param = lastNode.createStringParam("sep107", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep107 = param
    del param

    param = lastNode.createStringParam("sep108", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep108 = param
    del param

    param = lastNode.createSeparatorParam("CONVERSION", " (Fabrice Fernandez - 2018)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.CONVERSION = param
    del param

    param = lastNode.createStringParam("sep109", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep109 = param
    del param

    param = lastNode.createStringParam("sep110", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep110 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output2"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output2")
    lastNode.setPosition(4127, 4061)
    lastNode.setSize(90, 50)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput2 = lastNode

    del lastNode
    # End of node "Output2"

    # Start of node "Source"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Source")
    lastNode.setLabel("Source")
    lastNode.setPosition(4127, 3799)
    lastNode.setSize(90, 50)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSource = lastNode

    del lastNode
    # End of node "Source"

    # Start of node "Shadertoy1"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Shadertoy1")
    lastNode.setLabel("Shadertoy1")
    lastNode.setPosition(4127, 3935)
    lastNode.setSize(90, 50)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShadertoy1 = lastNode

    param = lastNode.getParam("paramValueFloat0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueFloat1")
    if param is not None:
        param.setValue(0.75, 0)
        del param

    param = lastNode.getParam("paramValueFloat2")
    if param is not None:
        param.setValue(0.005, 0)
        del param

    param = lastNode.getParam("paramValueFloat3")
    if param is not None:
        param.setValue(0.04, 0)
        del param

    param = lastNode.getParam("imageShaderFileName")
    if param is not None:
        param.setValue("/run/media/root/FABRICE/PERSO/NATRON/GIT_DEV/natron-plugins/Shadertoy/Ls_FXAA.frag.glsl")
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\r\n//\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//                        MM.                          .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\r\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\r\n//                   MM.  .MmM              MMMM      MMM.  .MM\r\n//                  MM.  .MMM                 MM       MMM.  .MM\r\n//                 MM.  .MMM                   M        MMM.  .MM\r\n//                MM.  .MMM                              MMM.  .MM\r\n//                 MM.  .MMM                            MMM.  .MM\r\n//                  MM.  .MMM       M                  MMM.  .MM\r\n//                   MM.  .MMM      MM                MMM.  .MM\r\n//                    MM.  .MMM     MMM              MMM.  .MM\r\n//                     MM.  .MMM    MMMM            MMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                        MM.                          .MM\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//\r\n//\r\n//\r\n//\r\n// Adaptation pour Natron par F. Fernandez\r\n// Code original : Ls_FXAA Matchbox pour Autodesk Flame\r\n\r\n// Adapted to Natron by F.Fernandez\r\n// Original code : Ls_FXAA Matchbox for Autodesk Flame\r\n\r\n\r\n// FXAA 3.11, fast cheap antialiasing\r\n// I\'ve modified this to calculate luma on the fly instead of requiring a pre-pass\r\n// lewis@lewissaunders.com\r\n\r\n#extension GL_EXT_gpu_shader4 : enable\r\n#define FXAA_GATHER4_ALPHA 0\r\n\r\n\r\n\r\nuniform float mixx = 1.0; // Mix : (mix), min=0.0, max=1.0\r\n\r\n// Choose the amount of sub-pixel aliasing removal.\r\n// This can effect sharpness.\r\n//   1.00 - upper limit (softer)\r\n//   0.75 - default amount of filtering\r\n//   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\r\n//   0.25 - almost off\r\n//   0.00 - completely off\r\nuniform float fxaaQualitySubpix = 0.75; // Subpixel amount : (amount of sub-pixel aliasing removal, can affect sharpness), min=0, max=1\r\n\r\n// The minimum amount of local contrast required to apply algorithm.\r\n//   0.333 - too little (faster)\r\n//   0.250 - low quality\r\n//   0.166 - default\r\n//   0.125 - high quality \r\n//   0.063 - overkill (slower)\r\nuniform float fxaaQualityEdgeThreshold = 0.005; // Edge treshold (minimum amount of local contrast required to apply algorithm), min=0, max=1\r\n\r\n// Trims the algorithm from processing darks.\r\n//   0.0833 - upper limit (default, the start of visible unfiltered edges)\r\n//   0.0625 - high quality (faster)\r\n//   0.0312 - visible limit (slower)\r\nuniform float fxaaQualityEdgeThresholdMin = 0.04; // Dark treshold (tTrims the algorithm from processing darks), min=0.0, max=1.0\r\n\r\nconst float greenlumamix = 1.0;\r\n\r\n#define FXAA_PC 1\r\n#define FXAA_GLSL_120 1\r\n#define FXAA_QUALITY__PRESET 39\r\n#define FXAA_GREEN_AS_LUMA 0\r\n\r\n#ifndef FXAA_PS3\r\n    #define FXAA_PS3 0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_360\r\n    #define FXAA_360 0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_360_OPT\r\n    #define FXAA_360_OPT 0\r\n#endif\r\n/*==========================================================================*/\r\n#ifndef FXAA_PC\r\n    //\r\n    // FXAA Quality\r\n    // The high quality PC algorithm.\r\n    //\r\n    #define FXAA_PC 0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_PC_CONSOLE\r\n    //\r\n    // The console algorithm for PC is included\r\n    // for developers targeting really low spec machines.\r\n    // Likely better to just run FXAA_PC, and use a really low preset.\r\n    //\r\n    #define FXAA_PC_CONSOLE 0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_GLSL_120\r\n    #define FXAA_GLSL_120 0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_GLSL_130\r\n    #define FXAA_GLSL_130 0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_HLSL_3\r\n    #define FXAA_HLSL_3 0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_HLSL_4\r\n    #define FXAA_HLSL_4 0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_HLSL_5\r\n    #define FXAA_HLSL_5 0\r\n#endif\r\n/*==========================================================================*/\r\n#ifndef FXAA_GREEN_AS_LUMA\r\n    //\r\n    // For those using non-linear color,\r\n    // and either not able to get luma in alpha, or not wanting to,\r\n    // this enables FXAA to run using green as a proxy for luma.\r\n    // So with this enabled, no need to pack luma in alpha.\r\n    //\r\n    // This will turn off AA on anything which lacks some amount of green.\r\n    // Pure red and blue or combination of only R and B, will get no AA.\r\n    //\r\n    // Might want to lower the settings for both,\r\n    //    fxaaConsoleEdgeThresholdMin\r\n    //    fxaaQualityEdgeThresholdMin\r\n    // In order to insure AA does not get turned off on colors \r\n    // which contain a minor amount of green.\r\n    //\r\n    // 1 = On.\r\n    // 0 = Off.\r\n    //\r\n    #define FXAA_GREEN_AS_LUMA 0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_EARLY_EXIT\r\n    //\r\n    // Controls algorithm\'s early exit path.\r\n    // On PS3 turning this ON adds 2 cycles to the shader.\r\n    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\r\n    // Turning this off on console will result in a more blurry image.\r\n    // So this defaults to on.\r\n    //\r\n    // 1 = On.\r\n    // 0 = Off.\r\n    //\r\n    #define FXAA_EARLY_EXIT 1\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_DISCARD\r\n    //\r\n    // Only valid for PC OpenGL currently.\r\n    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\r\n    //\r\n    // 1 = Use discard on pixels which don\'t need AA.\r\n    //     For APIs which enable concurrent TEX+ROP from same surface.\r\n    // 0 = Return unchanged color on pixels which don\'t need AA.\r\n    //\r\n    #define FXAA_DISCARD 0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_FAST_PIXEL_OFFSET\r\n    //\r\n    // Used for GLSL 120 only.\r\n    //\r\n    // 1 = GL API supports fast pixel offsets\r\n    // 0 = do not use fast pixel offsets\r\n    //\r\n    #ifdef GL_EXT_gpu_shader4\r\n        #define FXAA_FAST_PIXEL_OFFSET 1\r\n    #endif\r\n    #ifdef GL_NV_gpu_shader5\r\n        #define FXAA_FAST_PIXEL_OFFSET 1\r\n    #endif\r\n    #ifdef GL_ARB_gpu_shader5\r\n        #define FXAA_FAST_PIXEL_OFFSET 1\r\n    #endif\r\n    #ifndef FXAA_FAST_PIXEL_OFFSET\r\n        #define FXAA_FAST_PIXEL_OFFSET 0\r\n    #endif\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_GATHER4_ALPHA\r\n    //\r\n    // 1 = API supports gather4 on alpha channel.\r\n    // 0 = API does not support gather4 on alpha channel.\r\n    //\r\n    #if (FXAA_HLSL_5 == 1)\r\n        #define FXAA_GATHER4_ALPHA 1\r\n    #endif\r\n    #ifdef GL_ARB_gpu_shader5\r\n        #define FXAA_GATHER4_ALPHA 1\r\n    #endif\r\n    #ifdef GL_NV_gpu_shader5\r\n        #define FXAA_GATHER4_ALPHA 1\r\n    #endif\r\n    #ifndef FXAA_GATHER4_ALPHA\r\n        #define FXAA_GATHER4_ALPHA 0\r\n    #endif\r\n#endif\r\n\r\n/*============================================================================\r\n                      FXAA CONSOLE PS3 - TUNING KNOBS\r\n============================================================================*/\r\n#ifndef FXAA_CONSOLE__PS3_EDGE_SHARPNESS\r\n    //\r\n    // Consoles the sharpness of edges on PS3 only.\r\n    // Non-PS3 tuning is done with shader input.\r\n    //\r\n    // Due to the PS3 being ALU bound,\r\n    // there are only two safe values here: 4 and 8.\r\n    // These options use the shaders ability to a free *|/ by 2|4|8.\r\n    //\r\n    // 8.0 is sharper\r\n    // 4.0 is softer\r\n    // 2.0 is really soft (good for vector graphics inputs)\r\n    //\r\n    #if 1\r\n        #define FXAA_CONSOLE__PS3_EDGE_SHARPNESS 8.0\r\n    #endif\r\n    #if 0\r\n        #define FXAA_CONSOLE__PS3_EDGE_SHARPNESS 4.0\r\n    #endif\r\n    #if 0\r\n        #define FXAA_CONSOLE__PS3_EDGE_SHARPNESS 2.0\r\n    #endif\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#ifndef FXAA_CONSOLE__PS3_EDGE_THRESHOLD\r\n    //\r\n    // Only effects PS3.\r\n    // Non-PS3 tuning is done with shader input.\r\n    //\r\n    // The minimum amount of local contrast required to apply algorithm.\r\n    // The console setting has a different mapping than the quality setting.\r\n    //\r\n    // This only applies when FXAA_EARLY_EXIT is 1.\r\n    //\r\n    // Due to the PS3 being ALU bound,\r\n    // there are only two safe values here: 0.25 and 0.125.\r\n    // These options use the shaders ability to a free *|/ by 2|4|8.\r\n    //\r\n    // 0.125 leaves less aliasing, but is softer\r\n    // 0.25 leaves more aliasing, and is sharper\r\n    //\r\n    #if 1\r\n        #define FXAA_CONSOLE__PS3_EDGE_THRESHOLD 0.125\r\n    #else\r\n        #define FXAA_CONSOLE__PS3_EDGE_THRESHOLD 0.25\r\n    #endif\r\n#endif\r\n\r\n/*============================================================================\r\n                        FXAA QUALITY - TUNING KNOBS\r\n------------------------------------------------------------------------------\r\nNOTE the other tuning knobs are now in the shader function inputs!\r\n============================================================================*/\r\n#ifndef FXAA_QUALITY__PRESET\r\n    //\r\n    // Choose the quality preset.\r\n    // This needs to be compiled into the shader as it effects code.\r\n    // Best option to include multiple presets is to \r\n    // in each shader define the preset, then include this file.\r\n    // \r\n    // OPTIONS\r\n    // -----------------------------------------------------------------------\r\n    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\r\n    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\r\n    // 39       - no dither, very expensive \r\n    //\r\n    // NOTES\r\n    // -----------------------------------------------------------------------\r\n    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\r\n    // 13 = about same speed as FXAA 3.9 and better than 12\r\n    // 23 = closest to FXAA 3.9 visually and performance wise\r\n    //  _ = the lowest digit is directly related to performance\r\n    // _  = the highest digit is directly related to style\r\n    // \r\n    #define FXAA_QUALITY__PRESET 12\r\n#endif\r\n\r\n\r\n/*============================================================================\r\n\r\n                           FXAA QUALITY - PRESETS\r\n\r\n============================================================================*/\r\n\r\n/*============================================================================\r\n                     FXAA QUALITY - MEDIUM DITHER PRESETS\r\n============================================================================*/\r\n#if (FXAA_QUALITY__PRESET == 10)\r\n    #define FXAA_QUALITY__PS 3\r\n    #define FXAA_QUALITY__P0 1.5\r\n    #define FXAA_QUALITY__P1 3.0\r\n    #define FXAA_QUALITY__P2 12.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 11)\r\n    #define FXAA_QUALITY__PS 4\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 3.0\r\n    #define FXAA_QUALITY__P3 12.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 12)\r\n    #define FXAA_QUALITY__PS 5\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 4.0\r\n    #define FXAA_QUALITY__P4 12.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 13)\r\n    #define FXAA_QUALITY__PS 6\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 2.0\r\n    #define FXAA_QUALITY__P4 4.0\r\n    #define FXAA_QUALITY__P5 12.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 14)\r\n    #define FXAA_QUALITY__PS 7\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 2.0\r\n    #define FXAA_QUALITY__P4 2.0\r\n    #define FXAA_QUALITY__P5 4.0\r\n    #define FXAA_QUALITY__P6 12.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 15)\r\n    #define FXAA_QUALITY__PS 8\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 2.0\r\n    #define FXAA_QUALITY__P4 2.0\r\n    #define FXAA_QUALITY__P5 2.0\r\n    #define FXAA_QUALITY__P6 4.0\r\n    #define FXAA_QUALITY__P7 12.0\r\n#endif\r\n\r\n/*============================================================================\r\n                     FXAA QUALITY - LOW DITHER PRESETS\r\n============================================================================*/\r\n#if (FXAA_QUALITY__PRESET == 20)\r\n    #define FXAA_QUALITY__PS 3\r\n    #define FXAA_QUALITY__P0 1.5\r\n    #define FXAA_QUALITY__P1 2.0\r\n    #define FXAA_QUALITY__P2 8.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 21)\r\n    #define FXAA_QUALITY__PS 4\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 8.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 22)\r\n    #define FXAA_QUALITY__PS 5\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 2.0\r\n    #define FXAA_QUALITY__P4 8.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 23)\r\n    #define FXAA_QUALITY__PS 6\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 2.0\r\n    #define FXAA_QUALITY__P4 2.0\r\n    #define FXAA_QUALITY__P5 8.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 24)\r\n    #define FXAA_QUALITY__PS 7\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 2.0\r\n    #define FXAA_QUALITY__P4 2.0\r\n    #define FXAA_QUALITY__P5 3.0\r\n    #define FXAA_QUALITY__P6 8.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 25)\r\n    #define FXAA_QUALITY__PS 8\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 2.0\r\n    #define FXAA_QUALITY__P4 2.0\r\n    #define FXAA_QUALITY__P5 2.0\r\n    #define FXAA_QUALITY__P6 4.0\r\n    #define FXAA_QUALITY__P7 8.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 26)\r\n    #define FXAA_QUALITY__PS 9\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 2.0\r\n    #define FXAA_QUALITY__P4 2.0\r\n    #define FXAA_QUALITY__P5 2.0\r\n    #define FXAA_QUALITY__P6 2.0\r\n    #define FXAA_QUALITY__P7 4.0\r\n    #define FXAA_QUALITY__P8 8.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 27)\r\n    #define FXAA_QUALITY__PS 10\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 2.0\r\n    #define FXAA_QUALITY__P4 2.0\r\n    #define FXAA_QUALITY__P5 2.0\r\n    #define FXAA_QUALITY__P6 2.0\r\n    #define FXAA_QUALITY__P7 2.0\r\n    #define FXAA_QUALITY__P8 4.0\r\n    #define FXAA_QUALITY__P9 8.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 28)\r\n    #define FXAA_QUALITY__PS 11\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 2.0\r\n    #define FXAA_QUALITY__P4 2.0\r\n    #define FXAA_QUALITY__P5 2.0\r\n    #define FXAA_QUALITY__P6 2.0\r\n    #define FXAA_QUALITY__P7 2.0\r\n    #define FXAA_QUALITY__P8 2.0\r\n    #define FXAA_QUALITY__P9 4.0\r\n    #define FXAA_QUALITY__P10 8.0\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_QUALITY__PRESET == 29)\r\n    #define FXAA_QUALITY__PS 12\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.5\r\n    #define FXAA_QUALITY__P2 2.0\r\n    #define FXAA_QUALITY__P3 2.0\r\n    #define FXAA_QUALITY__P4 2.0\r\n    #define FXAA_QUALITY__P5 2.0\r\n    #define FXAA_QUALITY__P6 2.0\r\n    #define FXAA_QUALITY__P7 2.0\r\n    #define FXAA_QUALITY__P8 2.0\r\n    #define FXAA_QUALITY__P9 2.0\r\n    #define FXAA_QUALITY__P10 4.0\r\n    #define FXAA_QUALITY__P11 8.0\r\n#endif\r\n\r\n/*============================================================================\r\n                     FXAA QUALITY - EXTREME QUALITY\r\n============================================================================*/\r\n#if (FXAA_QUALITY__PRESET == 39)\r\n    #define FXAA_QUALITY__PS 12\r\n    #define FXAA_QUALITY__P0 1.0\r\n    #define FXAA_QUALITY__P1 1.0\r\n    #define FXAA_QUALITY__P2 1.0\r\n    #define FXAA_QUALITY__P3 1.0\r\n    #define FXAA_QUALITY__P4 1.0\r\n    #define FXAA_QUALITY__P5 1.5\r\n    #define FXAA_QUALITY__P6 2.0\r\n    #define FXAA_QUALITY__P7 2.0\r\n    #define FXAA_QUALITY__P8 2.0\r\n    #define FXAA_QUALITY__P9 2.0\r\n    #define FXAA_QUALITY__P10 4.0\r\n    #define FXAA_QUALITY__P11 8.0\r\n#endif\r\n\r\n\r\n\r\n/*============================================================================\r\n\r\n                                API PORTING\r\n\r\n============================================================================*/\r\n#if (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\r\n    #define FxaaBool bool\r\n    #define FxaaDiscard discard\r\n    #define FxaaFloat float\r\n    #define FxaaFloat2 vec2\r\n    #define FxaaFloat3 vec3\r\n    #define FxaaFloat4 vec4\r\n    #define FxaaHalf float\r\n    #define FxaaHalf2 vec2\r\n    #define FxaaHalf3 vec3\r\n    #define FxaaHalf4 vec4\r\n    #define FxaaInt2 ivec2\r\n    #define FxaaSat(x) clamp(x, 0.0, 1.0)\r\n    #define FxaaTex sampler2D\r\n#else\r\n    #define FxaaBool bool\r\n    #define FxaaDiscard clip(-1)\r\n    #define FxaaFloat float\r\n    #define FxaaFloat2 float2\r\n    #define FxaaFloat3 float3\r\n    #define FxaaFloat4 float4\r\n    #define FxaaHalf half\r\n    #define FxaaHalf2 half2\r\n    #define FxaaHalf3 half3\r\n    #define FxaaHalf4 half4\r\n    #define FxaaSat(x) saturate(x)\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_GLSL_120 == 1)\r\n    // Requires,\r\n    //  #version 120\r\n    // And at least,\r\n    //  #extension GL_EXT_gpu_shader4 : enable\r\n    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\r\n    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\r\n    #if (FXAA_FAST_PIXEL_OFFSET == 1)\r\n        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\r\n    #else\r\n        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\r\n    #endif\r\n    #if (FXAA_GATHER4_ALPHA == 1)\r\n        // use #extension GL_ARB_gpu_shader5 : enable\r\n        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\r\n        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\r\n        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\r\n        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\r\n    #endif\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_GLSL_130 == 1)\r\n    // Requires \"#version 130\" or better\r\n    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\r\n    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\r\n    #if (FXAA_GATHER4_ALPHA == 1)\r\n        // use #extension GL_ARB_gpu_shader5 : enable\r\n        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\r\n        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\r\n        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\r\n        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\r\n    #endif\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_HLSL_3 == 1) || (FXAA_360 == 1) || (FXAA_PS3 == 1)\r\n    #define FxaaInt2 float2\r\n    #define FxaaTex sampler2D\r\n    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\r\n    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_HLSL_4 == 1)\r\n    #define FxaaInt2 int2\r\n    struct FxaaTex { SamplerState smpl; Texture2D tex; };\r\n    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\r\n    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\r\n#endif\r\n/*--------------------------------------------------------------------------*/\r\n#if (FXAA_HLSL_5 == 1)\r\n    #define FxaaInt2 int2\r\n    struct FxaaTex { SamplerState smpl; Texture2D tex; };\r\n    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\r\n    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\r\n    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\r\n    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\r\n    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\r\n    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\r\n#endif\r\n\r\n\r\n/*============================================================================\r\n                   GREEN AS LUMA OPTION SUPPORT FUNCTION\r\n============================================================================*/\r\n//#if (FXAA_GREEN_AS_LUMA == 0)\r\n    // I changed this.  Luma pre-pass seems like too much work for our non-realtime needs\r\n    // lewis@lewissaunders.com\r\n //   FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return dot(rgba.rgb, vec3(0.2126, 0.7152, 0.0722)); }\r\n//#else\r\n//    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\r\n//#endif    \r\n\r\nFxaaFloat FxaaLuma(FxaaFloat4 rgba) {\r\n    float green = rgba.g;\r\n    float luma = dot(rgba.rgb, vec3(0.2126, 0.7152, 0.0722));\r\n    return mix(green, luma, greenlumamix);\r\n}\r\n\r\n\r\n/*============================================================================\r\n\r\n                             FXAA3 QUALITY - PC\r\n\r\n============================================================================*/\r\n#if (FXAA_PC == 1)\r\n/*--------------------------------------------------------------------------*/\r\nFxaaFloat4 FxaaPixelShader(\r\n    //\r\n    // Use noperspective interpolation here (turn off perspective interpolation).\r\n    // {xy} = center of pixel\r\n    FxaaFloat2 pos,\r\n    //\r\n    // Used only for FXAA Console, and not used on the 360 version.\r\n    // Use noperspective interpolation here (turn off perspective interpolation).\r\n    // {xy__} = upper left of pixel\r\n    // {__zw} = lower right of pixel\r\n    FxaaFloat4 fxaaConsolePosPos,\r\n    //\r\n    // Input color texture.\r\n    // {rgb_} = color in linear or perceptual color space\r\n    // if (FXAA_GREEN_AS_LUMA == 0)\r\n    //     {___a} = luma in perceptual color space (not linear)\r\n    FxaaTex tex,\r\n    //\r\n    // Only used on the optimized 360 version of FXAA Console.\r\n    // For everything but 360, just use the same input here as for \"tex\".\r\n    // For 360, same texture, just alias with a 2nd sampler.\r\n    // This sampler needs to have an exponent bias of -1.\r\n    FxaaTex fxaaConsole360TexExpBiasNegOne,\r\n    //\r\n    // Only used on the optimized 360 version of FXAA Console.\r\n    // For everything but 360, just use the same input here as for \"tex\".\r\n    // For 360, same texture, just alias with a 3nd sampler.\r\n    // This sampler needs to have an exponent bias of -2.\r\n    FxaaTex fxaaConsole360TexExpBiasNegTwo,\r\n    //\r\n    // Only used on FXAA Quality.\r\n    // This must be from a constant/uniform.\r\n    // {x_} = 1.0/screenWidthInPixels\r\n    // {_y} = 1.0/screenHeightInPixels\r\n    FxaaFloat2 fxaaQualityRcpFrame,\r\n    //\r\n    // Only used on FXAA Console.\r\n    // This must be from a constant/uniform.\r\n    // This effects sub-pixel AA quality and inversely sharpness.\r\n    //   Where N ranges between,\r\n    //     N = 0.50 (default)\r\n    //     N = 0.33 (sharper)\r\n    // {x___} = -N/screenWidthInPixels  \r\n    // {_y__} = -N/screenHeightInPixels\r\n    // {__z_} =  N/screenWidthInPixels  \r\n    // {___w} =  N/screenHeightInPixels \r\n    FxaaFloat4 fxaaConsoleRcpFrameOpt,\r\n    //\r\n    // Only used on FXAA Console.\r\n    // Not used on 360, but used on PS3 and PC.\r\n    // This must be from a constant/uniform.\r\n    // {x___} = -2.0/screenWidthInPixels  \r\n    // {_y__} = -2.0/screenHeightInPixels\r\n    // {__z_} =  2.0/screenWidthInPixels  \r\n    // {___w} =  2.0/screenHeightInPixels \r\n    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\r\n    //\r\n    // Only used on FXAA Console.\r\n    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\r\n    // This must be from a constant/uniform.\r\n    // {x___} =  8.0/screenWidthInPixels  \r\n    // {_y__} =  8.0/screenHeightInPixels\r\n    // {__z_} = -4.0/screenWidthInPixels  \r\n    // {___w} = -4.0/screenHeightInPixels \r\n    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\r\n    //\r\n    // Only used on FXAA Quality.\r\n    // This used to be the FXAA_QUALITY__SUBPIX define.\r\n    // It is here now to allow easier tuning.\r\n    // Choose the amount of sub-pixel aliasing removal.\r\n    // This can effect sharpness.\r\n    //   1.00 - upper limit (softer)\r\n    //   0.75 - default amount of filtering\r\n    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\r\n    //   0.25 - almost off\r\n    //   0.00 - completely off\r\n    FxaaFloat fxaaQualitySubpix,\r\n    //\r\n    // Only used on FXAA Quality.\r\n    // This used to be the FXAA_QUALITY__EDGE_THRESHOLD define.\r\n    // It is here now to allow easier tuning.\r\n    // The minimum amount of local contrast required to apply algorithm.\r\n    //   0.333 - too little (faster)\r\n    //   0.250 - low quality\r\n    //   0.166 - default\r\n    //   0.125 - high quality \r\n    //   0.063 - overkill (slower)\r\n    FxaaFloat fxaaQualityEdgeThreshold,\r\n    //\r\n    // Only used on FXAA Quality.\r\n    // This used to be the FXAA_QUALITY__EDGE_THRESHOLD_MIN define.\r\n    // It is here now to allow easier tuning.\r\n    // Trims the algorithm from processing darks.\r\n    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\r\n    //   0.0625 - high quality (faster)\r\n    //   0.0312 - visible limit (slower)\r\n    // Special notes when using FXAA_GREEN_AS_LUMA,\r\n    //   Likely want to set this to zero.\r\n    //   As colors that are mostly not-green\r\n    //   will appear very dark in the green channel!\r\n    //   Tune by looking at mostly non-green content,\r\n    //   then start at zero and increase until aliasing is a problem.\r\n    FxaaFloat fxaaQualityEdgeThresholdMin,\r\n    // \r\n    // Only used on FXAA Console.\r\n    // This used to be the FXAA_CONSOLE__EDGE_SHARPNESS define.\r\n    // It is here now to allow easier tuning.\r\n    // This does not effect PS3, as this needs to be compiled in.\r\n    //   Use FXAA_CONSOLE__PS3_EDGE_SHARPNESS for PS3.\r\n    //   Due to the PS3 being ALU bound,\r\n    //   there are only three safe values here: 2 and 4 and 8.\r\n    //   These options use the shaders ability to a free *|/ by 2|4|8.\r\n    // For all other platforms can be a non-power of two.\r\n    //   8.0 is sharper (default!!!)\r\n    //   4.0 is softer\r\n    //   2.0 is really soft (good only for vector graphics inputs)\r\n    FxaaFloat fxaaConsoleEdgeSharpness,\r\n    //\r\n    // Only used on FXAA Console.\r\n    // This used to be the FXAA_CONSOLE__EDGE_THRESHOLD define.\r\n    // It is here now to allow easier tuning.\r\n    // This does not effect PS3, as this needs to be compiled in.\r\n    //   Use FXAA_CONSOLE__PS3_EDGE_THRESHOLD for PS3.\r\n    //   Due to the PS3 being ALU bound,\r\n    //   there are only two safe values here: 1/4 and 1/8.\r\n    //   These options use the shaders ability to a free *|/ by 2|4|8.\r\n    // The console setting has a different mapping than the quality setting.\r\n    // Other platforms can use other values.\r\n    //   0.125 leaves less aliasing, but is softer (default!!!)\r\n    //   0.25 leaves more aliasing, and is sharper\r\n    FxaaFloat fxaaConsoleEdgeThreshold,\r\n    //\r\n    // Only used on FXAA Console.\r\n    // This used to be the FXAA_CONSOLE__EDGE_THRESHOLD_MIN define.\r\n    // It is here now to allow easier tuning.\r\n    // Trims the algorithm from processing darks.\r\n    // The console setting has a different mapping than the quality setting.\r\n    // This only applies when FXAA_EARLY_EXIT is 1.\r\n    // This does not apply to PS3, \r\n    // PS3 was simplified to avoid more shader instructions.\r\n    //   0.06 - faster but more aliasing in darks\r\n    //   0.05 - default\r\n    //   0.04 - slower and less aliasing in darks\r\n    // Special notes when using FXAA_GREEN_AS_LUMA,\r\n    //   Likely want to set this to zero.\r\n    //   As colors that are mostly not-green\r\n    //   will appear very dark in the green channel!\r\n    //   Tune by looking at mostly non-green content,\r\n    //   then start at zero and increase until aliasing is a problem.\r\n    FxaaFloat fxaaConsoleEdgeThresholdMin,\r\n    //    \r\n    // Extra constants for 360 FXAA Console only.\r\n    // Use zeros or anything else for other platforms.\r\n    // These must be in physical constant registers and NOT immedates.\r\n    // Immedates will result in compiler un-optimizing.\r\n    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\r\n    FxaaFloat4 fxaaConsole360ConstDir\r\n) {\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaFloat2 posM;\r\n    posM.x = pos.x;\r\n    posM.y = pos.y;\r\n    #if (FXAA_GATHER4_ALPHA == 1)\r\n        #if (FXAA_DISCARD == 0)\r\n            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\r\n            #if (FXAA_GREEN_AS_LUMA == 0)\r\n                #define lumaM rgbyM.w\r\n            #else\r\n                #define lumaM rgbyM.y\r\n            #endif\r\n        #endif\r\n        #if (FXAA_GREEN_AS_LUMA == 0)\r\n            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\r\n            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\r\n        #else\r\n            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\r\n            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\r\n        #endif\r\n        #if (FXAA_DISCARD == 1)\r\n            #define lumaM luma4A.w\r\n        #endif\r\n        #define lumaE luma4A.z\r\n        #define lumaS luma4A.x\r\n        #define lumaSE luma4A.y\r\n        #define lumaNW luma4B.w\r\n        #define lumaN luma4B.z\r\n        #define lumaW luma4B.x\r\n    #else\r\n        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\r\n        //#if (FXAA_GREEN_AS_LUMA == 0)\r\n        //   #define lumaM rgbyM.w\r\n        //#else\r\n        //    #define lumaM rgbyM.y\r\n        //#endif\r\n        FxaaFloat lumaM = FxaaLuma(rgbyM);\r\n        FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\r\n        FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\r\n        FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\r\n        FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\r\n    #endif\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaFloat maxSM = max(lumaS, lumaM);\r\n    FxaaFloat minSM = min(lumaS, lumaM);\r\n    FxaaFloat maxESM = max(lumaE, maxSM);\r\n    FxaaFloat minESM = min(lumaE, minSM);\r\n    FxaaFloat maxWN = max(lumaN, lumaW);\r\n    FxaaFloat minWN = min(lumaN, lumaW);\r\n    FxaaFloat rangeMax = max(maxWN, maxESM);\r\n    FxaaFloat rangeMin = min(minWN, minESM);\r\n    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\r\n    FxaaFloat range = rangeMax - rangeMin;\r\n    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\r\n    FxaaBool earlyExit = range < rangeMaxClamped;\r\n/*--------------------------------------------------------------------------*/\r\n    if(earlyExit)\r\n        #if (FXAA_DISCARD == 1)\r\n            FxaaDiscard;\r\n        #else\r\n            return rgbyM;\r\n        #endif\r\n/*--------------------------------------------------------------------------*/\r\n    #if (FXAA_GATHER4_ALPHA == 0)\r\n        FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\r\n        FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\r\n        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\r\n        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\r\n    #else\r\n        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\r\n        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\r\n    #endif\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaFloat lumaNS = lumaN + lumaS;\r\n    FxaaFloat lumaWE = lumaW + lumaE;\r\n    FxaaFloat subpixRcpRange = 1.0/range;\r\n    FxaaFloat subpixNSWE = lumaNS + lumaWE;\r\n    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\r\n    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaFloat lumaNESE = lumaNE + lumaSE;\r\n    FxaaFloat lumaNWNE = lumaNW + lumaNE;\r\n    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\r\n    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaFloat lumaNWSW = lumaNW + lumaSW;\r\n    FxaaFloat lumaSWSE = lumaSW + lumaSE;\r\n    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\r\n    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\r\n    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\r\n    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\r\n    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\r\n    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\r\n    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\r\n    FxaaBool horzSpan = edgeHorz >= edgeVert;\r\n    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\r\n/*--------------------------------------------------------------------------*/\r\n    if(!horzSpan) lumaN = lumaW;\r\n    if(!horzSpan) lumaS = lumaE;\r\n    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\r\n    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaFloat gradientN = lumaN - lumaM;\r\n    FxaaFloat gradientS = lumaS - lumaM;\r\n    FxaaFloat lumaNN = lumaN + lumaM;\r\n    FxaaFloat lumaSS = lumaS + lumaM;\r\n    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\r\n    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\r\n    if(pairN) lengthSign = -lengthSign;\r\n    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaFloat2 posB;\r\n    posB.x = posM.x;\r\n    posB.y = posM.y;\r\n    FxaaFloat2 offNP;\r\n    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\r\n    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\r\n    if(!horzSpan) posB.x += lengthSign * 0.5;\r\n    if( horzSpan) posB.y += lengthSign * 0.5;\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaFloat2 posN;\r\n    posN.x = posB.x - offNP.x * FXAA_QUALITY__P0;\r\n    posN.y = posB.y - offNP.y * FXAA_QUALITY__P0;\r\n    FxaaFloat2 posP;\r\n    posP.x = posB.x + offNP.x * FXAA_QUALITY__P0;\r\n    posP.y = posB.y + offNP.y * FXAA_QUALITY__P0;\r\n    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\r\n    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\r\n    FxaaFloat subpixE = subpixC * subpixC;\r\n    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\r\n/*--------------------------------------------------------------------------*/\r\n    if(!pairN) lumaNN = lumaSS;\r\n    FxaaFloat gradientScaled = gradient * 1.0/4.0;\r\n    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\r\n    FxaaFloat subpixF = subpixD * subpixE;\r\n    FxaaBool lumaMLTZero = lumaMM < 0.0;\r\n/*--------------------------------------------------------------------------*/\r\n    lumaEndN -= lumaNN * 0.5;\r\n    lumaEndP -= lumaNN * 0.5;\r\n    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\r\n    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\r\n    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P1;\r\n    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P1;\r\n    FxaaBool doneNP = (!doneN) || (!doneP);\r\n    if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P1;\r\n    if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P1;\r\n/*--------------------------------------------------------------------------*/\r\n    if(doneNP) {\r\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n        doneN = abs(lumaEndN) >= gradientScaled;\r\n        doneP = abs(lumaEndP) >= gradientScaled;\r\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P2;\r\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P2;\r\n        doneNP = (!doneN) || (!doneP);\r\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P2;\r\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P2;\r\n/*--------------------------------------------------------------------------*/\r\n        #if (FXAA_QUALITY__PS > 3)\r\n        if(doneNP) {\r\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n            doneN = abs(lumaEndN) >= gradientScaled;\r\n            doneP = abs(lumaEndP) >= gradientScaled;\r\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P3;\r\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P3;\r\n            doneNP = (!doneN) || (!doneP);\r\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P3;\r\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P3;\r\n/*--------------------------------------------------------------------------*/\r\n            #if (FXAA_QUALITY__PS > 4)\r\n            if(doneNP) {\r\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                doneN = abs(lumaEndN) >= gradientScaled;\r\n                doneP = abs(lumaEndP) >= gradientScaled;\r\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P4;\r\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P4;\r\n                doneNP = (!doneN) || (!doneP);\r\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P4;\r\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P4;\r\n/*--------------------------------------------------------------------------*/\r\n                #if (FXAA_QUALITY__PS > 5)\r\n                if(doneNP) {\r\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                    doneN = abs(lumaEndN) >= gradientScaled;\r\n                    doneP = abs(lumaEndP) >= gradientScaled;\r\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P5;\r\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P5;\r\n                    doneNP = (!doneN) || (!doneP);\r\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P5;\r\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P5;\r\n/*--------------------------------------------------------------------------*/\r\n                    #if (FXAA_QUALITY__PS > 6)\r\n                    if(doneNP) {\r\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                        doneN = abs(lumaEndN) >= gradientScaled;\r\n                        doneP = abs(lumaEndP) >= gradientScaled;\r\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P6;\r\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P6;\r\n                        doneNP = (!doneN) || (!doneP);\r\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P6;\r\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P6;\r\n/*--------------------------------------------------------------------------*/\r\n                        #if (FXAA_QUALITY__PS > 7)\r\n                        if(doneNP) {\r\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                            doneN = abs(lumaEndN) >= gradientScaled;\r\n                            doneP = abs(lumaEndP) >= gradientScaled;\r\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P7;\r\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P7;\r\n                            doneNP = (!doneN) || (!doneP);\r\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P7;\r\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P7;\r\n/*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY__PS > 8)\r\n    if(doneNP) {\r\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n        doneN = abs(lumaEndN) >= gradientScaled;\r\n        doneP = abs(lumaEndP) >= gradientScaled;\r\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P8;\r\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P8;\r\n        doneNP = (!doneN) || (!doneP);\r\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P8;\r\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P8;\r\n/*--------------------------------------------------------------------------*/\r\n        #if (FXAA_QUALITY__PS > 9)\r\n        if(doneNP) {\r\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n            doneN = abs(lumaEndN) >= gradientScaled;\r\n            doneP = abs(lumaEndP) >= gradientScaled;\r\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P9;\r\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P9;\r\n            doneNP = (!doneN) || (!doneP);\r\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P9;\r\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P9;\r\n/*--------------------------------------------------------------------------*/\r\n            #if (FXAA_QUALITY__PS > 10)\r\n            if(doneNP) {\r\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                doneN = abs(lumaEndN) >= gradientScaled;\r\n                doneP = abs(lumaEndP) >= gradientScaled;\r\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P10;\r\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P10;\r\n                doneNP = (!doneN) || (!doneP);\r\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P10;\r\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P10;\r\n/*--------------------------------------------------------------------------*/\r\n                #if (FXAA_QUALITY__PS > 11)\r\n                if(doneNP) {\r\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                    doneN = abs(lumaEndN) >= gradientScaled;\r\n                    doneP = abs(lumaEndP) >= gradientScaled;\r\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P11;\r\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P11;\r\n                    doneNP = (!doneN) || (!doneP);\r\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P11;\r\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P11;\r\n/*--------------------------------------------------------------------------*/\r\n                    #if (FXAA_QUALITY__PS > 12)\r\n                    if(doneNP) {\r\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                        doneN = abs(lumaEndN) >= gradientScaled;\r\n                        doneP = abs(lumaEndP) >= gradientScaled;\r\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P12;\r\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P12;\r\n                        doneNP = (!doneN) || (!doneP);\r\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P12;\r\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P12;\r\n/*--------------------------------------------------------------------------*/\r\n                    }\r\n                    #endif\r\n/*--------------------------------------------------------------------------*/\r\n                }\r\n                #endif\r\n/*--------------------------------------------------------------------------*/\r\n            }\r\n            #endif\r\n/*--------------------------------------------------------------------------*/\r\n        }\r\n        #endif\r\n/*--------------------------------------------------------------------------*/\r\n    }\r\n    #endif\r\n/*--------------------------------------------------------------------------*/\r\n                        }\r\n                        #endif\r\n/*--------------------------------------------------------------------------*/\r\n                    }\r\n                    #endif\r\n/*--------------------------------------------------------------------------*/\r\n                }\r\n                #endif\r\n/*--------------------------------------------------------------------------*/\r\n            }\r\n            #endif\r\n/*--------------------------------------------------------------------------*/\r\n        }\r\n        #endif\r\n/*--------------------------------------------------------------------------*/\r\n    }\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaFloat dstN = posM.x - posN.x;\r\n    FxaaFloat dstP = posP.x - posM.x;\r\n    if(!horzSpan) dstN = posM.y - posN.y;\r\n    if(!horzSpan) dstP = posP.y - posM.y;\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\r\n    FxaaFloat spanLength = (dstP + dstN);\r\n    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\r\n    FxaaFloat spanLengthRcp = 1.0/spanLength;\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaBool directionN = dstN < dstP;\r\n    FxaaFloat dst = min(dstN, dstP);\r\n    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\r\n    FxaaFloat subpixG = subpixF * subpixF;\r\n    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\r\n    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\r\n/*--------------------------------------------------------------------------*/\r\n    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\r\n    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\r\n    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\r\n    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\r\n    #if (FXAA_DISCARD == 1)\r\n        return FxaaTexTop(tex, posM);\r\n    #else\r\n        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\r\n    #endif\r\n}\r\n/*==========================================================================*/\r\n#endif\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n  vec2 res = vec2(iResolution.x, iResolution.y);\r\n  vec2 coords = fragCoord.xy / res;\r\n  vec4 orig = texture2D(iChannel0, coords);\r\n  vec4 aa = FxaaPixelShader(coords, vec4(0.0), iChannel0, iChannel0, iChannel0,\r\n                            vec2(1.0/iResolution.x, 1.0/iResolution.y),\r\n                            vec4(0.0), vec4(0.0), vec4(0.0),\r\n                            fxaaQualitySubpix, fxaaQualityEdgeThreshold, fxaaQualityEdgeThresholdMin,\r\n                            0.0, 0.0, 0.0, vec4(0.0));\r\n  vec4 mixed = mix(orig, aa, mixx);\r\n  fragColor = vec4(mixed);\r\n}\r\n\r\n/* Adapted from:\r\n============================================================================\r\n\r\n\r\n                    NVIDIA FXAA 3.11 by TIMOTHY LOTTES\r\n\r\n\r\n------------------------------------------------------------------------------\r\nCOPYRIGHT (C) 2010, 2011 NVIDIA CORPORATION. ALL RIGHTS RESERVED.\r\n------------------------------------------------------------------------------\r\nTO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED\r\n*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS\r\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF\r\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL NVIDIA\r\nOR ITS SUPPLIERS BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR\r\nCONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR\r\nLOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION,\r\nOR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE\r\nTHIS SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\r\nDAMAGES. */\r\n")
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(4, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("mixx")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Mix :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("mix")
        del param

    param = lastNode.getParam("paramDefaultFloat0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinFloat0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("fxaaQualitySubpix")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Subpixel amount :")
        del param

    param = lastNode.getParam("paramHint1")
    if param is not None:
        param.setValue("amount of sub-pixel aliasing removal, can affect sharpness")
        del param

    param = lastNode.getParam("paramDefaultFloat1")
    if param is not None:
        param.setValue(0.75, 0)
        del param

    param = lastNode.getParam("paramMinFloat1")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat1")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType2")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName2")
    if param is not None:
        param.setValue("fxaaQualityEdgeThreshold")
        del param

    param = lastNode.getParam("paramLabel2")
    if param is not None:
        param.setValue("Edge treshold")
        del param

    param = lastNode.getParam("paramHint2")
    if param is not None:
        param.setValue("minimum amount of local contrast required to apply algorithm")
        del param

    param = lastNode.getParam("paramDefaultFloat2")
    if param is not None:
        param.setValue(0.005, 0)
        del param

    param = lastNode.getParam("paramMinFloat2")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat2")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType3")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName3")
    if param is not None:
        param.setValue("fxaaQualityEdgeThresholdMin")
        del param

    param = lastNode.getParam("paramLabel3")
    if param is not None:
        param.setValue("Dark treshold")
        del param

    param = lastNode.getParam("paramHint3")
    if param is not None:
        param.setValue("tTrims the algorithm from processing darks")
        del param

    param = lastNode.getParam("paramDefaultFloat3")
    if param is not None:
        param.setValue(0.04, 0)
        del param

    param = lastNode.getParam("paramMinFloat3")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat3")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Shadertoy1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput2.connectInput(0, groupShadertoy1)
    groupShadertoy1.connectInput(0, groupSource)

    param = groupShadertoy1.getParam("paramValueFloat0")
    group.getParam("Shadertoy1paramValueFloat0").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueFloat1")
    group.getParam("Shadertoy1paramValueFloat1").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueFloat2")
    group.getParam("Shadertoy1paramValueFloat2").setAsAlias(param)
    del param
    param = groupShadertoy1.getParam("paramValueFloat3")
    group.getParam("Shadertoy1paramValueFloat3").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["Ls_FXAA_GLExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
