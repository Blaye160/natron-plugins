# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_ColourSmearExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_ColourSmearExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_ColourSmear"

def getLabel():
    return "lp_ColourSmear"

def getVersion():
    return 1

def getGrouping():
    return "Filter"

def getPluginDescription():
    return "Smeares/spreads out (or in) pixels around a given matte. Useful for the creation of cleanplates, or re-coloring motion-blurred objects on chroma-backgrounds."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createDouble2DParam("smear", "smear")
    param.setMinimum(0, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Sets the amount of how much pixels should be smeared/spread.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.smear = param
    del param

    param = lastNode.createChoiceParam("main_smearfilter", "Filter")
    entries = [ ("Quasi-Gaussian", "Quasi-Gaussian filter (0-order recursive Deriche filter, faster) - IIR (infinite support / impulsional response)."),
    ("Gaussian", "Gaussian filter (Van Vliet recursive Gaussian filter, more isotropic, slower) - IIR (infinite support / impulsional response)."),
    ("Box", "Box filter - FIR (finite support / impulsional response)."),
    ("Triangle", "Triangle/tent filter - FIR (finite support / impulsional response)."),
    ("Quadratic", "Quadratic filter - FIR (finite support / impulsional response).")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Sets the filter for the main-operation.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.main_smearfilter = param
    del param

    param = lastNode.createBooleanParam("precision", "precision mode")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Uses precision mode to maintain better edge-detail.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.precision = param
    del param

    param = lastNode.createSeparatorParam("sep01", " ")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createDouble2DParam("edge_blursize", "edge blur")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Blurs the edge around the smear.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.edge_blursize = param
    del param

    param = lastNode.createDouble2DParam("centerblursize", "center blur")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Blurs the smeared area.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.centerblursize = param
    del param

    param = lastNode.createSeparatorParam("filler02", "matte correct")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.filler02 = param
    del param

    param = lastNode.createInt2DParam("Erode1size", "erode")
    param.setMinimum(-1000, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(-40, 0)
    param.setDisplayMaximum(40, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1000, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(-40, 1)
    param.setDisplayMaximum(40, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Erode/Dilate the connected matte.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Erode1size = param
    del param

    param = lastNode.createBooleanParam("invmatte", "invert matte")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Invert the connected matte (e.g. to fill holes instead of spreading out).")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.invmatte = param
    del param

    param = lastNode.createBooleanParam("prevmatte", "preview matte")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Preview the used matte.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.prevmatte = param
    del param

    param = lastNode.createBooleanParam("invmask", "invert mask")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Invert the connected mask.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.invmask = param
    del param

    param = lastNode.createBooleanParam("usealpha", "use alpha")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Uses the Alpha-Channel of the connected img instead of the matte-input.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.usealpha = param
    del param

    param = lastNode.createStringParam("copyright", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("lp_ColourSmear v1.0\n(c) 2016 by lucas pfaff\ninspired by Richard Frazer (http://richardfrazer.com/tools-tutorials/colour-smear-for-nuke/)")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.copyright = param
    del param

    lastNode.grain_ctrl = lastNode.createPageParam("grain_ctrl", "Grain")
    param = lastNode.createBooleanParam("grainactivation", "activate")

    # Add the param to the page
    lastNode.grain_ctrl.addParam(param)

    # Set param properties
    param.setHelp("Activates Grain for the smeared area.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.grainactivation = param
    del param

    param = lastNode.createSeparatorParam("sep01g", " ")

    # Add the param to the page
    lastNode.grain_ctrl.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01g = param
    del param

    param = lastNode.createDoubleParam("SeGrain1grainSizeAll", "size all")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.grain_ctrl.addParam(param)

    # Set param properties
    param.setHelp("Global factor on grain size.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.SeGrain1grainSizeAll = param
    del param

    param = lastNode.createColorParam("grainsize", "size", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(7, 0)
    param.setDefaultValue(3, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(7, 1)
    param.setDefaultValue(3, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(7, 2)
    param.setDefaultValue(3, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.grain_ctrl.addParam(param)

    # Set param properties
    param.setHelp("Sets the size of the Grain for RGB individually.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.grainsize = param
    del param

    param = lastNode.createColorParam("grainirregularity", "irregularity", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.6, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.6, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.6, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.grain_ctrl.addParam(param)

    # Set param properties
    param.setHelp("Increases or decreases the random quality of the Grain.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.grainirregularity = param
    del param

    param = lastNode.createColorParam("grainintensity", "intensity", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.1, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.1, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.grain_ctrl.addParam(param)

    # Set param properties
    param.setHelp("Sets the intensity of the Grain individually for R, G and B.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.grainintensity = param
    del param

    param = lastNode.createSeparatorParam("sep02g", " ")

    # Add the param to the page
    lastNode.grain_ctrl.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep02g = param
    del param

    param = lastNode.createDoubleParam("SeGrain1colorCorr", "Correlation")
    param.setMinimum(-1, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(-1, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.grain_ctrl.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.SeGrain1colorCorr = param
    del param

    param = lastNode.createColorParam("SeGrain1grainBlack", "Black", False)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.grain_ctrl.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.SeGrain1grainBlack = param
    del param

    param = lastNode.createColorParam("SeGrain1grainMinimum", "Minimum", False)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0.01, 0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0.01, 1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(0.01, 2)

    # Add the param to the page
    lastNode.grain_ctrl.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.SeGrain1grainMinimum = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'grain_ctrl', 'Node', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output1")
    lastNode.setLabel("Output1")
    lastNode.setPosition(1705, 4626)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(1708, -415)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "Erode1"
    lastNode = app.createNode("net.sf.cimg.CImgErode", 2, group)
    lastNode.setScriptName("Erode1")
    lastNode.setLabel("Erode1")
    lastNode.setPosition(2496, 595)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErode1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("expandRoD")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Erode1"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(1708, 899)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(1753, 95)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(2496, 81)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(2496, 744)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(2108, 188)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    del lastNode
    # End of node "Constant1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(2496, 256)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    del lastNode
    # End of node "Merge1"

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(2496, 424)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(2240, 1291)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(1753, 1078)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Unpremult1"
    lastNode = app.createNode("net.sf.openfx.Unpremult", 2, group)
    lastNode.setScriptName("Unpremult1")
    lastNode.setLabel("Unpremult1")
    lastNode.setPosition(2194, 1564)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupUnpremult1 = lastNode

    del lastNode
    # End of node "Unpremult1"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(2556, 1865)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    del lastNode
    # End of node "Merge2"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(2601, 1803)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(2240, 1803)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "precision_1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("precision_1")
    lastNode.setLabel("precision_1")
    lastNode.setPosition(2886, 2856)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupprecision_1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    del lastNode
    # End of node "precision_1"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(3199, 1291)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(3189, 2875)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(2546, 2844)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    del lastNode
    # End of node "Merge3"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(2072, 2856)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "Premult2"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult2")
    lastNode.setLabel("Premult2")
    lastNode.setPosition(1702, 3362)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult2 = lastNode

    del lastNode
    # End of node "Premult2"

    # Start of node "Merge4_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4_2")
    lastNode.setLabel("Merge4_2")
    lastNode.setPosition(1702, 3518)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("under")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("under")
        del param

    del lastNode
    # End of node "Merge4_2"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(1460, 95)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(1429, 3550)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(1702, 3801)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(1429, 3815)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Switch3"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch3")
    lastNode.setLabel("Switch3")
    lastNode.setPosition(1702, 3995)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch3 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch3"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(2541, 913)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(3734, 913)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(3703, 4014)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "matte"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("matte")
    lastNode.setLabel("matte")
    lastNode.setPosition(2496, -430)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmatte = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "matte"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(988, 3800)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(3189, 2723)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(3189, 2574)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "Merge6"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge6")
    lastNode.setLabel("Merge6")
    lastNode.setPosition(2546, 2692)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge6 = lastNode

    del lastNode
    # End of node "Merge6"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("precision_2")
    lastNode.setPosition(2881, 2704)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Blur2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("Blur2")
    lastNode.setLabel("precision_3")
    lastNode.setPosition(2895, 2555)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    del lastNode
    # End of node "Blur2"

    # Start of node "Merge7"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7")
    lastNode.setLabel("Merge7")
    lastNode.setPosition(2546, 2539)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7 = lastNode

    del lastNode
    # End of node "Merge7"

    # Start of node "Merge8"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge8")
    lastNode.setLabel("Merge8")
    lastNode.setPosition(2553, 2396)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge8 = lastNode

    del lastNode
    # End of node "Merge8"

    # Start of node "Merge9"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge9")
    lastNode.setLabel("Merge9")
    lastNode.setPosition(2556, 1996)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge9 = lastNode

    del lastNode
    # End of node "Merge9"

    # Start of node "Merge10"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge10")
    lastNode.setLabel("Merge10")
    lastNode.setPosition(2553, 2262)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge10 = lastNode

    del lastNode
    # End of node "Merge10"

    # Start of node "Merge11"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge11")
    lastNode.setLabel("Merge11")
    lastNode.setPosition(2553, 2127)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge11 = lastNode

    del lastNode
    # End of node "Merge11"

    # Start of node "precision_4"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("precision_4")
    lastNode.setLabel("precision_4")
    lastNode.setPosition(2901, 2408)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupprecision_4 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    del lastNode
    # End of node "precision_4"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(3189, 2427)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "precision_5"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("precision_5")
    lastNode.setLabel("precision_5")
    lastNode.setPosition(2902, 2278)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupprecision_5 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    del lastNode
    # End of node "precision_5"

    # Start of node "Dot17"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot17")
    lastNode.setLabel("Dot17")
    lastNode.setPosition(3194, 2294)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot17 = lastNode

    del lastNode
    # End of node "Dot17"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(3193, 2162)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "precision_6"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("precision_6")
    lastNode.setLabel("precision_6")
    lastNode.setPosition(2912, 2143)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupprecision_6 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    del lastNode
    # End of node "precision_6"

    # Start of node "precision_7"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("precision_7")
    lastNode.setLabel("precision_7")
    lastNode.setPosition(2921, 2008)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupprecision_7 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    del lastNode
    # End of node "precision_7"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(3199, 2027)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "precision_8"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("precision_8")
    lastNode.setLabel("precision_8")
    lastNode.setPosition(2922, 1882)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupprecision_8 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    del lastNode
    # End of node "precision_8"

    # Start of node "Dot20"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot20")
    lastNode.setLabel("Dot20")
    lastNode.setPosition(3199, 1896)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot20 = lastNode

    del lastNode
    # End of node "Dot20"

    # Start of node "matte_preview"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("matte_preview")
    lastNode.setLabel("matte_preview")
    lastNode.setPosition(3658, 3613)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupmatte_preview = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.a")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.a")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.a")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "matte_preview"

    # Start of node "Invert2"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert2")
    lastNode.setLabel("Invert2")
    lastNode.setPosition(988, 4150)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert2 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert2"

    # Start of node "Dot21"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot21")
    lastNode.setLabel("Dot21")
    lastNode.setPosition(1033, 4321)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot21 = lastNode

    del lastNode
    # End of node "Dot21"

    # Start of node "Shuffle5"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle5")
    lastNode.setLabel("Shuffle5")
    lastNode.setPosition(1702, 3176)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle5 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle5"

    # Start of node "Dot22"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot22")
    lastNode.setLabel("Dot22")
    lastNode.setPosition(2223, 3190)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot22 = lastNode

    del lastNode
    # End of node "Dot22"

    # Start of node "Premult3"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult3")
    lastNode.setLabel("Premult3")
    lastNode.setPosition(2194, 1160)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult3 = lastNode

    del lastNode
    # End of node "Premult3"

    # Start of node "edge_blur"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("edge_blur")
    lastNode.setLabel("edge_blur")
    lastNode.setPosition(1708, 1498)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupedge_blur = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    del lastNode
    # End of node "edge_blur"

    # Start of node "Premult4"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult4")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(1708, 1626)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult4 = lastNode

    del lastNode
    # End of node "Premult4"

    # Start of node "Dot23"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot23")
    lastNode.setLabel("Dot23")
    lastNode.setPosition(2153, 95)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot23 = lastNode

    del lastNode
    # End of node "Dot23"

    # Start of node "Grade2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade2")
    lastNode.setLabel("Grade2")
    lastNode.setPosition(2194, 1484)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0.0001, 0)
        param.setValue(0.0001, 1)
        param.setValue(0.0001, 2)
        param.setValue(0.0001, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade2"

    # Start of node "Dot24"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot24")
    lastNode.setLabel("Dot24")
    lastNode.setPosition(2225, 2660)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot24 = lastNode

    del lastNode
    # End of node "Dot24"

    # Start of node "Constant2"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant2")
    lastNode.setLabel("Constant2")
    lastNode.setPosition(1196, 3924)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant2 = lastNode

    del lastNode
    # End of node "Constant2"

    # Start of node "Dot25"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot25")
    lastNode.setLabel("Dot25")
    lastNode.setPosition(1241, 3815)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot25 = lastNode

    del lastNode
    # End of node "Dot25"

    # Start of node "Merge12"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge12")
    lastNode.setLabel("Merge12")
    lastNode.setPosition(988, 4020)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge12 = lastNode

    del lastNode
    # End of node "Merge12"

    # Start of node "Dot26"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot26")
    lastNode.setLabel("Dot26")
    lastNode.setPosition(1241, 4046)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot26 = lastNode

    del lastNode
    # End of node "Dot26"

    # Start of node "Dot27"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot27")
    lastNode.setLabel("Dot27")
    lastNode.setPosition(2153, 282)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot27 = lastNode

    del lastNode
    # End of node "Dot27"

    # Start of node "Blur3"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("Blur3")
    lastNode.setLabel("smear")
    lastNode.setPosition(2194, 1390)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur3 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(43.6644, 0)
        param.setValue(43.6644, 1)
        del param

    param = lastNode.getParam("expandRoD")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Blur3"

    # Start of node "Grade3"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade3")
    lastNode.setLabel("Grade3")
    lastNode.setPosition(2194, 1643)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade3 = lastNode

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade3"

    # Start of node "Merge13"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge13")
    lastNode.setLabel("Merge13")
    lastNode.setPosition(1706, 2844)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge13 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("under")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("under")
        del param

    del lastNode
    # End of node "Merge13"

    # Start of node "Dot30"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot30")
    lastNode.setLabel("Dot30")
    lastNode.setPosition(2240, 1078)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot30 = lastNode

    del lastNode
    # End of node "Dot30"

    # Start of node "centerblur"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("centerblur")
    lastNode.setLabel("centerblur")
    lastNode.setPosition(2194, 1729)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupcenterblur = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    del lastNode
    # End of node "centerblur"

    # Start of node "Grade4"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade4")
    lastNode.setLabel("Grade4")
    lastNode.setPosition(2180, 2985)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade4 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(0.0001, 0)
        param.setValue(0.0001, 1)
        param.setValue(0.0001, 2)
        param.setValue(0.0001, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade4"

    # Start of node "KeyMix1"
    lastNode = app.createNode("net.sf.openfx.KeyMix", 1, group)
    lastNode.setScriptName("KeyMix1")
    lastNode.setLabel("KeyMix1")
    lastNode.setPosition(1717, 4307)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupKeyMix1 = lastNode

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "KeyMix1"

    # Start of node "SeGrain1"
    lastNode = app.createNode("net.sf.openfx.SeGrain", 1, group)
    lastNode.setScriptName("SeGrain1")
    lastNode.setLabel("SeGrain1")
    lastNode.setPosition(1910, 2844)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.75, 0.75, 0.75)
    groupSeGrain1 = lastNode

    param = lastNode.getParam("grainSizeAll")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("colorCorr")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("grainBlack")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        del param

    param = lastNode.getParam("grainMinimum")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "SeGrain1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupKeyMix1)
    groupErode1.connectInput(0, groupGrade1)
    groupShuffle1.connectInput(0, groupDot1)
    groupShuffle1.connectInput(1, groupDot11)
    groupDot1.connectInput(0, groupimg)
    groupSwitch1.connectInput(0, groupmatte)
    groupSwitch1.connectInput(1, groupDot23)
    groupInvert1.connectInput(0, groupErode1)
    groupConstant1.connectInput(0, groupDot23)
    groupMerge1.connectInput(0, groupSwitch1)
    groupMerge1.connectInput(1, groupDot27)
    groupGrade1.connectInput(0, groupMerge1)
    groupDot2.connectInput(0, groupPremult3)
    groupDot3.connectInput(0, groupShuffle1)
    groupUnpremult1.connectInput(0, groupGrade2)
    groupMerge2.connectInput(0, groupDot4)
    groupMerge2.connectInput(1, groupprecision_8)
    groupDot4.connectInput(0, groupDot5)
    groupDot5.connectInput(0, groupcenterblur)
    groupprecision_1.connectInput(0, groupDot7)
    groupDot6.connectInput(0, groupDot2)
    groupDot7.connectInput(0, groupDot14)
    groupMerge3.connectInput(0, groupMerge6)
    groupMerge3.connectInput(1, groupprecision_1)
    groupSwitch2.connectInput(0, groupMerge3)
    groupSwitch2.connectInput(1, groupDot24)
    groupPremult2.connectInput(0, groupShuffle5)
    groupMerge4_2.connectInput(0, groupPremult2)
    groupMerge4_2.connectInput(1, groupDot9)
    groupDot8.connectInput(0, groupDot1)
    groupDot9.connectInput(0, groupDot8)
    groupShuffle2.connectInput(0, groupMerge4_2)
    groupShuffle2.connectInput(1, groupDot10)
    groupDot10.connectInput(0, groupDot9)
    groupSwitch3.connectInput(0, groupShuffle2)
    groupSwitch3.connectInput(1, groupDot13)
    groupDot11.connectInput(0, groupInvert1)
    groupDot12.connectInput(0, groupDot11)
    groupDot13.connectInput(0, groupmatte_preview)
    groupDot14.connectInput(0, groupDot15)
    groupDot15.connectInput(0, groupDot16)
    groupMerge6.connectInput(0, groupMerge7)
    groupMerge6.connectInput(1, groupBlur1)
    groupBlur1.connectInput(0, groupDot14)
    groupBlur2.connectInput(0, groupDot15)
    groupMerge7.connectInput(0, groupMerge8)
    groupMerge7.connectInput(1, groupBlur2)
    groupMerge8.connectInput(0, groupMerge10)
    groupMerge8.connectInput(1, groupprecision_4)
    groupMerge9.connectInput(0, groupMerge2)
    groupMerge9.connectInput(1, groupprecision_7)
    groupMerge10.connectInput(0, groupMerge11)
    groupMerge10.connectInput(1, groupprecision_5)
    groupMerge11.connectInput(0, groupMerge9)
    groupMerge11.connectInput(1, groupprecision_6)
    groupprecision_4.connectInput(0, groupDot16)
    groupDot16.connectInput(0, groupDot17)
    groupprecision_5.connectInput(0, groupDot17)
    groupDot17.connectInput(0, groupDot18)
    groupDot18.connectInput(0, groupDot19)
    groupprecision_6.connectInput(0, groupDot18)
    groupprecision_7.connectInput(0, groupDot19)
    groupDot19.connectInput(0, groupDot20)
    groupprecision_8.connectInput(0, groupDot20)
    groupDot20.connectInput(0, groupDot6)
    groupmatte_preview.connectInput(1, groupDot12)
    groupInvert2.connectInput(0, groupMerge12)
    groupDot21.connectInput(0, groupInvert2)
    groupShuffle5.connectInput(0, groupMerge13)
    groupShuffle5.connectInput(1, groupDot22)
    groupDot22.connectInput(0, groupGrade4)
    groupPremult3.connectInput(0, groupDot30)
    groupedge_blur.connectInput(0, groupDot3)
    groupPremult4.connectInput(0, groupedge_blur)
    groupDot23.connectInput(0, groupDot1)
    groupGrade2.connectInput(0, groupBlur3)
    groupDot24.connectInput(0, groupDot5)
    groupConstant2.connectInput(0, groupDot25)
    groupDot25.connectInput(0, groupDot10)
    groupMerge12.connectInput(0, groupmask)
    groupMerge12.connectInput(1, groupDot26)
    groupDot26.connectInput(0, groupConstant2)
    groupDot27.connectInput(0, groupConstant1)
    groupBlur3.connectInput(0, groupDot2)
    groupGrade3.connectInput(0, groupUnpremult1)
    groupMerge13.connectInput(0, groupPremult4)
    groupMerge13.connectInput(1, groupSeGrain1)
    groupDot30.connectInput(0, groupDot3)
    groupcenterblur.connectInput(0, groupGrade3)
    groupGrade4.connectInput(0, groupDot24)
    groupKeyMix1.connectInput(0, groupSwitch3)
    groupKeyMix1.connectInput(1, groupDot10)
    groupKeyMix1.connectInput(2, groupDot21)
    groupSeGrain1.connectInput(0, groupSwitch2)

    param = groupErode1.getParam("size")
    group.getParam("Erode1size").setAsAlias(param)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.usealpha.get()", False, 0)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("1-thisGroup.invmatte.get()", False, 0)
    del param
    param = groupprecision_1.getParam("size")
    param.setExpression("thisGroup.smear.get()[dimension]*.04", False, 0)
    param.setExpression("thisGroup.smear.get()[dimension]*.04", False, 1)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("1-thisGroup.precision.get()", False, 0)
    del param
    param = groupSwitch3.getParam("which")
    param.setExpression("thisGroup.prevmatte.get()", False, 0)
    del param
    param = groupBlur1.getParam("size")
    param.setExpression("thisGroup.smear.get()[dimension]*.095", False, 0)
    param.setExpression("thisGroup.smear.get()[dimension]*.095", False, 1)
    del param
    param = groupBlur2.getParam("size")
    param.setExpression("thisGroup.smear.get()[dimension]*.145", False, 0)
    param.setExpression("thisGroup.smear.get()[dimension]*.145", False, 1)
    del param
    param = groupprecision_4.getParam("size")
    param.setExpression("thisGroup.smear.get()[dimension]*.2", False, 0)
    param.setExpression("thisGroup.smear.get()[dimension]*.2", False, 1)
    del param
    param = groupprecision_5.getParam("size")
    param.setExpression("thisGroup.smear.get()[dimension]*.255", False, 0)
    param.setExpression("thisGroup.smear.get()[dimension]*.255", False, 1)
    del param
    param = groupprecision_6.getParam("size")
    param.setExpression("thisGroup.smear.get()[dimension]*.305", False, 0)
    param.setExpression("thisGroup.smear.get()[dimension]*.305", False, 1)
    del param
    param = groupprecision_7.getParam("size")
    param.setExpression("thisGroup.smear.get()[dimension]*.41", False, 0)
    param.setExpression("thisGroup.smear.get()[dimension]*.41", False, 1)
    del param
    param = groupprecision_8.getParam("size")
    param.setExpression("thisGroup.smear.get()[dimension]*.6", False, 0)
    param.setExpression("thisGroup.smear.get()[dimension]*.6", False, 1)
    del param
    param = groupInvert2.getParam("disableNode")
    param.setExpression("1-thisGroup.invmask.get()", False, 0)
    del param
    param = groupedge_blur.getParam("size")
    group.getParam("edge_blursize").setAsAlias(param)
    del param
    param = groupBlur3.getParam("size")
    param.setExpression("thisGroup.smear.get()[dimension]*.54", False, 0)
    param.setExpression("thisGroup.smear.get()[dimension]*.54", False, 1)
    del param
    param = groupcenterblur.getParam("size")
    group.getParam("centerblursize").setAsAlias(param)
    del param
    param = groupSeGrain1.getParam("grainSizeAll")
    group.getParam("SeGrain1grainSizeAll").setAsAlias(param)
    del param
    param = groupSeGrain1.getParam("colorCorr")
    group.getParam("SeGrain1colorCorr").setAsAlias(param)
    del param
    param = groupSeGrain1.getParam("grainBlack")
    group.getParam("SeGrain1grainBlack").setAsAlias(param)
    del param
    param = groupSeGrain1.getParam("grainMinimum")
    group.getParam("SeGrain1grainMinimum").setAsAlias(param)
    del param
    param = groupSeGrain1.getParam("disableNode")
    param.setExpression("1-thisGroup.grainactivation.get()", False, 0)
    del param

    try:
        extModule = sys.modules["lp_ColourSmearExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
